import java.util.Scanner;
public class Realroots
{
	public static void main(String[] args)
	{
		Scanner sc = new Scanner(System.in);
		int d;
		int RootCount = 0;
		double resolution = Math.pow(10,-2);
		double threshold = Math.pow(10,-3);
		
		System.out.println("Enter the degree: ");
		d = sc.nextInt();
		
		System.out.println("Enter "+(d+1)+" coefficients: ");
		double[] C0= new double[d+1];
		for(int i =0;i<C0.length;i++)
		{
			C0[i] = sc.nextDouble();
		}
		
		System.out.println("Enter the left and right end points: ");
		double x1 = sc.nextDouble();
		double x2 = sc.nextDouble();
		
		double a1 = x1;
		double b1 = x2;
		double temp1;
		while(a1<=b1)
		{
			temp1 = a1;
			a1 +=resolution;
			if(poly(C0,temp1)*poly(C0,a1)<0)
			{
				
				RootCount++;
				System.out.print("Root found at ");
				System.out.printf("%.5f%n", +findRoot(C0,x1,x2,(Math.pow(10,-7)),0,0,0));
				x1 = (findRoot(C0,x1,x2,(Math.pow(10,-7)),0,0,0))+resolution;
				
			}
			
			else if(poly(diff(C0),temp1)*poly(diff(C0),a1)<0)
			{
				
				double t = Math.abs(poly(C0,(findRoot(C0,x1,x2,(Math.pow(10,-7)),0,0,0))));
				if(t<(Math.pow(10,-3)))
				{
					
					RootCount++;
					System.out.print("Root found at ");
					System.out.printf("%.5f%n", +findRoot(C0,x1,x2,(Math.pow(10,-7)),0,0,0));
					System.out.println("EVEN");
				}
				x1 = ((findRoot(C0,x1,x2,(Math.pow(10,-7)),0,0,0))+resolution);
				
			}
			
			//ROTCOT - 3 WHY didnt 3 get process?
			
		}
		
		if(RootCount==0)
		{
			System.out.print("No roots were found in the specified range. ");
		}
		
		
	
	}
    static double poly(double[] c, double i){
        int x=c.length -1;
        double total=0;
        int n=x;
        while(n>=0) {
            total += c[n] * Math.pow(i, x);
            x--;
            n--;
        }
        return total;
    }

    static double[] diff(double[] C){
        int x=C.length-1;
        int n=x;
        double[] returnValue= new double[C.length];
        while(n>=0){
            returnValue[n]=C[n]*(x);
            n--;
            x--;
        }
        return returnValue;
    }
	static double findRoot(double[] C, double a, double b, double tolerance, double temp, double mid, double width)
	{
		double resolution = Math.pow(10,-2);
		tolerance = Math.pow(10,-7);
		double threshold = Math.pow(10,-3);

		while(a<=b)
		{
			temp = a;
			a +=resolution;
			if(poly(C,temp)*poly(C,a)<0)
			{
				width = a - temp;
				while(width>tolerance)
				{
					mid = (a+temp)/2;
					
					if(poly(C,temp)*poly(C,mid)<0)
					{
						a = mid;
					}
					else
					{
						temp = mid;
					}
					width = a-temp;
					
				}
				break;
			}
			
			else if(poly(diff(C),temp)*poly(diff(C),a)<0)
			{
				width = a - temp;
				while(width>tolerance)
				{
					mid = (a+temp)/2;
					
					if(poly(diff(C),temp)*poly(diff(C),mid)<0)
					{
						a = mid;
					}
					else
					{
						temp = mid;
					}
					width = a-temp;
					
				}
				
				break;
			}
			
		}	
		
			
		
		
	
		
		
		return mid;
	}
	
	
	
}
